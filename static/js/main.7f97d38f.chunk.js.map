{"version":3,"sources":["Components/CreateTask.js","Components/Header.js","Components/SubTaskCard.js","Components/TaskCard.js","Components/NewTask.js","Components/InProgressTask.js","Components/CompletedTask.js","Components/ArchieveTask.js","Components/App.js","index.js"],"names":["CreateTask","props","useState","title","setTitle","desc","setDesc","className","onSubmit","e","preventDefault","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","lists","JSON","parse","localStorage","getItem","push","id","length","description","doneTask","task","setItem","stringify","setList","handleSubmit","name","type","required","placeholder","value","onChange","target","Header","onClick","setSelected","SubTaskCard","subIndex","checked","alert","setCounter","counter","handleClick","subTask","sub","TaskCard","subBTN","setsubBTN","text","setText","list","storage","useEffect","store","newList","updateList","progressToken","console","log","map","tsk","index","taskLength","NewTask","Object","keys","InProgressTask","handleList","CompletedTask","reverse","slice","ArchieveTask","filter","item","idx","App","selected","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.7f97d38f.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction CreateTask(props) {\n  const [title, setTitle] = useState(''); // KEEPS TRACK OF THE TITLE FIELD\n  const [desc, setDesc] = useState(''); // KEEPS TRACK OF THE THE DESCRIPTION FIELD\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let date = new Date();\n    var getDate = // GET DATE AND TIME\n      date.getDate() +\n      '/' +\n      date.getMonth() +\n      '/' +\n      date.getFullYear() +\n      '  ' +\n      date.getHours() +\n      ':' +\n      date.getMinutes() +\n      ':' +\n      date.getSeconds();\n\n    var lists = JSON.parse(localStorage.getItem('lists')) || []; //IF THE LIST EMPTY RETURN AN EMPTY ARRAY\n\n    lists.push({\n      id: lists.length + 1,\n      title: title,\n      description: desc,\n      date: getDate,\n      doneTask: 0, // 0  IF THE TASK IS NOT COMPLETED AND 1 IF THE TASK IS COMPLETED\n      task: [], //TRACKS ALL THE SUB TASKS\n    });\n\n    localStorage.setItem('lists', JSON.stringify(lists)); //setItem accepts the argument as STRING\n    props.setList(JSON.parse(localStorage.getItem('lists'))); //GETS THE UPDATED IN OUT LIST STATE WHENEVER NEW DATA IS PUSHED\n  };\n\n  return (\n    <div>\n      <form className='form__createTask' onSubmit={(e) => handleSubmit(e)}>\n        <div className='createTask__input'>\n          <input\n            name='title'\n            className='createTask__input-title'\n            type='text'\n            required\n            placeholder='Title'\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n          />\n          <input\n            name='description'\n            className='createTask__input-description'\n            type='text'\n            required\n            placeholder='Description'\n            value={desc}\n            onChange={(e) => setDesc(e.target.value)}\n          />\n          <button className='createTask__input-submit'>Create Task</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateTask;\n","import React from 'react';\n\nfunction Header(props) {\n  return (\n    <div className='header__container'>\n      <ul className='header__ul'>\n        <li onClick={() => props.setSelected('')} className='header__li'>\n          New Task\n        </li>\n        <li\n          onClick={() => props.setSelected('inprogress')}\n          className='header__li'\n        >\n          Inprogress Task\n        </li>\n        <li\n          onClick={() => props.setSelected('completed')}\n          className='header__li'\n        >\n          Completed\n        </li>\n        <li\n          onClick={() => props.setSelected('archieve')}\n          className='header__li'\n        >\n          Archieve Task\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction SubTaskCard(props) {\n  const handleClick = () => {\n    var lists = JSON.parse(localStorage.getItem('lists')); //GET ALL THE LIST DATA\n    if (lists[props.id - 1].task[props.subIndex].checked === 0) {\n      //CHECK IF THE SUB-TASK IS COMPLETED OR NOT\n      lists[props.id - 1].task[props.subIndex].checked = 1; //IF NOT THAN UPDATE THE LIST WITH COMPLETED\n      localStorage.setItem('lists', JSON.stringify(lists)); //PUSH THE DATA BACK TO LOCAL STORAGE\n      props.setCounter(props.counter + 1); //INCREASE THE COUNTER WHICH TRACKS THE NO. OF LENGTH OF SUB-TASK\n    } else throw alert('COMPLETED!'); //IF THE TASK IS COMPLETED RETURN AN ALERT THAT IT IS ALREADY COMPLETED\n  };\n\n  return (\n    <div onClick={() => handleClick()} className='sub__task'>\n      {props.subIndex + 1} : {props.subTask.sub}\n    </div>\n  );\n}\n\nexport default SubTaskCard;\n","import React, { useEffect, useState } from 'react';\n\n//Components\nimport SubTaskCard from './SubTaskCard';\n\nfunction TaskCard(props) {\n  //HANDLES ALL THE DATA FOR THE NEW LIST ASWELL AS INPROGRESS LIST\n  const [subBTN, setsubBTN] = useState(false); //ADD SUB-TASK BTN STATE\n  const [text, setText] = useState(''); //TRACK THE SUB-TASK TEXT\n  const [counter, setCounter] = useState(0); //COUNT THE LENGTH OF THE TASK THAT IS COMPLETED\n  const { id, title, description, date, task, doneTask } = props.list;\n\n  const handleSubmit = (e) => {\n    // e.preventDefault();\n    var storage = [];\n    storage = JSON.parse(localStorage.getItem('lists'));\n\n    storage[id - 1].task.push({ sub: text, checked: 0 });\n    localStorage.setItem('lists', JSON.stringify(storage));\n    // props.setList(JSON.parse(localStorage.getItem('lists')));\n  };\n\n  useEffect(() => {\n    if (task.length > 0 && task.length === counter) {\n      var store = [];\n      store = JSON.parse(localStorage.getItem('lists'));\n      store[id - 1].doneTask = 1;\n\n      localStorage.setItem('lists', JSON.stringify(store));\n      var newList = JSON.parse(localStorage.getItem('lists'));\n      props.updateList(newList);\n    }\n  }, [counter]);\n\n  return props.progressToken &&\n    task.length !== 0 &&\n    task.length > counter &&\n    doneTask !== 1 ? ( //CHECK IF THE TASK IS COMPLETED OR NOT || CHECK IF THE SUB TASK IS COMPLETED OR NOT\n    <div className='task__list' key={id}>\n      <div className='task__title'>Title: {title}</div>\n      <div className='task__description'>Description: {description}</div>\n      <div className='task__date'>Date/Time: {date}</div>\n      <div className='task__sub'>\n        Subtasks\n        {console.log(counter)}\n        {task.map((tsk, index) => {\n          return (\n            <SubTaskCard // RETRIVES THE SUB TASK DATA AND THE COUNT OF TASK COMPLETED\n              key={tsk.value}\n              id={id}\n              subTask={tsk}\n              subIndex={index}\n              taskLength={task.length}\n              setCounter={setCounter}\n              counter={counter}\n            />\n          );\n        })}\n      </div>\n      <button className='task__addsub' onClick={() => setsubBTN(!subBTN)}>\n        {subBTN ? '-' : '+'}\n      </button>\n      {subBTN ? (\n        <div className='sub__container'>\n          <form className='form__sub' onSubmit={(e) => handleSubmit(e)}>\n            <input\n              className='sub__input'\n              type='text'\n              required\n              placeholder='ADD SUBTASKS'\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n            />\n            <button className='task__addsub'>+</button>\n          </form>\n        </div>\n      ) : null}\n    </div>\n  ) : !props.progressToken && task.length === 0 ? (\n    <div className='task__list' key={id}>\n      <div className='task__title'>Title: {title}</div>\n      <div className='task__description'>Description: {description}</div>\n      <div className='task__date'>Date/Time: {date}</div>\n      <button className='task__addsub' onClick={() => setsubBTN(!subBTN)}>\n        {subBTN ? '-' : '+'}\n      </button>\n      {subBTN ? (\n        <div className='sub__container'>\n          <form className='form__sub' onSubmit={(e) => handleSubmit(e)}>\n            <input\n              className='sub__input'\n              type='text'\n              required\n              placeholder='ADD SUBTASKS'\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n            />\n            <button className='sub__submit'>+</button>\n          </form>\n        </div>\n      ) : null}\n    </div>\n  ) : null;\n}\n\nexport default TaskCard;\n","import React from 'react';\n\n//Components\nimport TaskCard from './TaskCard';\n\nfunction NewTask(props) {\n  return Object.keys(props.list).length === 0 ? (\n    <div className='loader'>No List</div>\n  ) : (\n    <div className='task__container'>\n      NEW TASK LIST\n      {props.list.map((list) => {\n        if (list.task.length === 0)\n          return <TaskCard list={list} key={list.id} />;\n        else return null;\n      })}\n    </div>\n  );\n}\n\nexport default NewTask;\n","import React from 'react';\n\n//Componets\nimport TaskCard from './TaskCard';\n\nfunction InProgressTask(props) {\n  const handleList = (e) => {\n    props.setList(e); //PASS THE NEW LIST TO THE LIST STATE IN APP COMPONENT\n  };\n\n  return Object.keys(props.list).length === 0 ? (\n    <div className='loader'>No Task in Progres</div>\n  ) : (\n    <div className='task__container'>\n      {props.list.map((list) => {\n        return (\n          <TaskCard list={list} progressToken={true} updateList={handleList} />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default InProgressTask;\n","import React, { useState } from 'react';\n\nfunction CompletedTask() {\n  const [list] = useState(() => {\n    const saved = JSON.parse(localStorage.getItem('lists')) || [];\n    return saved;\n  }); // Retirive all the list items\n\n  return Object.keys(list).length === 0 ? (\n    <div>NO TASKS PRESENT</div>\n  ) : (\n    <div className='task__container'>\n      COMPLETED TASK LIST\n      {list\n        .reverse()\n        .slice(0, 10)\n        .map((list) => {\n          if (list.doneTask === 1) {\n            return (\n              <div className='done__content'>\n                <div className='done__title'>Title: {list.title}</div>\n                <div className='done__description'>\n                  Description: {list.description}\n                </div>\n                <div className='done__date'>Date/Time: {list.date}</div>\n                <div className='done__text'>Task Completed</div>\n              </div>\n            );\n          } else return null;\n        })}\n    </div>\n  );\n}\n\nexport default CompletedTask;\n","import React, { useState } from 'react';\n\nfunction ArchieveTask() {\n  const [list] = useState(() => {\n    const saved = JSON.parse(localStorage.getItem('lists')) || [];\n    return saved;\n  }); // Retrive all the list\n\n  return Object.keys(list).length === 0 ? (\n    <div>NO LIST FOUND</div>\n  ) : Object.keys(list).length > 2 ? (\n    <div className='task__container'>\n      {list\n        .reverse()\n        .filter((item, idx) => idx > 1)\n        .map((list) => {\n          return (\n            <div className='done__content'>\n              <div className='done__title'>Title: {list.title}</div>\n              <div className='done__description'>\n                Description: {list.description}\n              </div>\n              <div className='done__date'>Date/Time: {list.date}</div>\n              <div className='done__text'>ARCHIVE TASK</div>\n            </div>\n          );\n        })}\n    </div>\n  ) : null;\n}\n\nexport default ArchieveTask;\n","import React, { useState } from 'react';\n\n//Components\nimport CreateTask from './CreateTask';\nimport Header from './Header';\nimport NewTask from './NewTask';\nimport InProgress from './InProgressTask';\nimport CompletedTask from './CompletedTask';\nimport ArchieveTask from './ArchieveTask';\n\nfunction App() {\n  const [list, setList] = useState(() => {\n    //Keeps track of all the lists\n    const saved = JSON.parse(localStorage.getItem('lists')) || [];\n    return saved;\n  });\n\n  const [selected, setSelected] = useState(''); //Kepp track of the selected layout screen\n\n  return (\n    <div className='main__container'>\n      <CreateTask list={list} setList={setList} />\n      <Header setSelected={setSelected} />\n      {selected === '' ? (\n        <NewTask list={list} setList={setList} />\n      ) : selected === 'inprogress' ? (\n        <InProgress list={list} setList={setList} />\n      ) : selected === 'completed' ? (\n        <CompletedTask />\n      ) : (\n        <ArchieveTask />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import './Components/sass/main.scss';\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\n\n//Components\nimport App from './Components/App';\n\nReactDom.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}